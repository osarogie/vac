# Autogenerated input type of Create
input CreateInput {
  name: String!
  phoneNumber: String!
  pickupAddress: String!
  deliveryAddress: String!
  paymentOption: Int
  amount: Int!
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of Create
type CreatePayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  message: String
  order: Order!
  status: Boolean!
}

type Mutation {
  createOrder(input: CreateInput!): CreatePayload
}

# An object with an ID.
interface Node {
  # ID of the object.
  id: ID!
}

type Order implements Node {
  _id: ID!
  amountCents: Float
  amountCurrency: String
  createdAt: String
  deliveredAt: String
  deliveryAddress: String
  id: ID!
  name: String
  orderStatus: Int
  paymentOption: Int
  phoneNumber: String
  pickedUpAt: String
  pickupAddress: String
  updatedAt: String
  user: User
  userId: ID
}

# The connection type for Order.
type OrderConnection {
  # A list of edges.
  edges: [OrderEdge]
  # A list of nodes.
  nodes: [Order]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type OrderEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: Order
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!
  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Query {
  # Orders
  orders(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
  ): OrderConnection!
  # Users
  users(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
  ): UserConnection!
}

type User implements Node {
  _id: ID!
  email: String
  fullName: String
  id: ID!
  orderCount: Int
  orders(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
  ): OrderConnection
  phoneNumber: String
}

# The connection type for User.
type UserConnection {
  # A list of edges.
  edges: [UserEdge]
  # A list of nodes.
  nodes: [User]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type UserEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: User
}

